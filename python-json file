import json
import boto3

translate = boto3.client('translate')

# Supported languages list
SUPPORTED_LANGUAGES = [
    'en', 'es', 'fr', 'de', 'hi', 'zh', 'ja', 'ar', 'it', 'pt', 'ru', 'ko', 'tr', 'pl', 'nl', 'sv', 'id', 'th', 'cs'
]

def lambda_handler(event, context):
    headers = {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Headers': '*'
    }

    try:
        body = json.loads(event['body'])
        text = body.get('text')
        source_lang = body.get('source_lang', 'auto')  # Default to 'auto' if not provided
        target_lang = body.get('target_lang')

        # Validate required fields
        if not text or not target_lang:
            return {
                'statusCode': 400,
                'headers': headers,
                'body': json.dumps({'error': 'Text and target_lang are required'})
            }

        # Validate target language support
        if target_lang not in SUPPORTED_LANGUAGES:
            return {
                'statusCode': 400,
                'headers': headers,
                'body': json.dumps({'error': f'Target language "{target_lang}" is not supported'})
            }

        # Handle auto-detect if source_lang is 'auto'
        if source_lang == 'auto':
            response = translate.translate_text(
                Text=text,
                TargetLanguageCode=target_lang
            )
        else:
            if source_lang not in SUPPORTED_LANGUAGES:
                return {
                    'statusCode': 400,
                    'headers': headers,
                    'body': json.dumps({'error': f'Source language "{source_lang}" is not supported'})
                }

            response = translate.translate_text(
                Text=text,
                SourceLanguageCode=source_lang,
                TargetLanguageCode=target_lang
            )

        translated_text = response.get('TranslatedText')

        return {
            'statusCode': 200,
            'headers': headers,
            'body': json.dumps({'translated_text': translated_text})
        }

    except Exception as e:
        return {
            'statusCode': 500,
            'headers': headers,
            'body': json.dumps({'error': str(e)})
        }

import json
import boto3
import base64

translate = boto3.client('translate')
polly = boto3.client('polly')

SUPPORTED_LANGUAGES = [
    'en', 'es', 'fr', 'de', 'hi', 'zh', 'ja', 'ar', 'it', 'pt', 'ru', 'ko', 'tr', 'pl', 'nl', 'sv', 'id', 'th', 'cs'
]

def lambda_handler(event, context):
    headers = {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Headers': '*'
    }

    try:
        body = json.loads(event['body'])
        text = body.get('text')
        source_lang = body.get('source_lang', 'auto')  # Default: Auto-detect
        target_lang = body.get('target_lang')

        if not text or not target_lang:
            return {
                'statusCode': 400,
                'headers': headers,
                'body': json.dumps({'error': 'Text and target_lang are required'})
            }

        if target_lang not in SUPPORTED_LANGUAGES:
            return {
                'statusCode': 400,
                'headers': headers,
                'body': json.dumps({'error': f'Target language "{target_lang}" is not supported'})
            }

        # Translate the text
        translation_response = translate.translate_text(
            Text=text,
            SourceLanguageCode=source_lang,
            TargetLanguageCode=target_lang
        )

        translated_text = translation_response['TranslatedText']

        # Convert the translated text to speech using Polly
        speech_response = polly.synthesize_speech(
            Text=translated_text,
            OutputFormat='mp3',
            VoiceId='Joanna'  # You can select different voices, e.g., 'Joanna', 'Matthew', 'Ivy'
        )

        # Get the audio stream and encode it as base64
        audio_stream = speech_response['AudioStream'].read()
        audio_base64 = base64.b64encode(audio_stream).decode('utf-8')

        return {
            'statusCode': 200,
            'headers': headers,
            'body': json.dumps({
                'translated_text': translated_text,
                'audio_url': 'data:audio/mp3;base64,' + audio_base64
            })
        }

    except Exception as e:
        return {
            'statusCode': 500,
            'headers': headers,
            'body': json.dumps({'error': str(e)})
        }
